#!/bin/bash

# Fail fast
set -o errexit

. scripts/helpers

application_configs() {
  step "Application configurations"
  if [ "${TYPE}" = "work" ]; then
    substep "MeetingBar"
    open -g -a MeetingBar

    for i in {1..100}; do
        if [ -f ~/Library/Containers/leits.MeetingBar/Data/Library/Preferences/leits.MeetingBar.plist ]; then
            break
        fi
        sleep 0.1
        if [ "${i}" -eq 100 ]; then
            err "Configuration failed to load ➡ exiting"
            exit 1
        fi
    done

    osascript -e 'quit app "MeetingBar"'
    defaults import leits.MeetingBar ~/.fettle-it/configs/meetingbar/leits.MeetingBar.plist
    open -a MeetingBar
    substep_done "MeetingBar ➡ complete"
  fi
  step_done "Done"
}

cleanup() {
  TYPE=
  SSHAGENT=
}

configure_git() {
  step "Configuring Git"
  substep "Add gitconfig"
  git_config="[include]
  path = ~/.fettle-it/configs/git/gitconfig"
  append_to_file "${git_config}" "${HOME}"/.gitconfig
  substep_done "Add gitconfig ➡ complete"

  substep "Configure Github user"
  if ! git config user.name >/dev/null; then
    git_user_name=$(gum input --placeholder "Github name")
    git config --global user.name "${git_user_name}"
  fi
  substep_done "User name ➡ set"

  if ! git config user.email >/dev/null; then
    git_user_email=$(gum input --placeholder "Github email")
    git config --global user.email "${git_user_email}"
  fi
  substep_done "User email ➡ set"

  if ! git config user.signingkey >/dev/null; then
    git_user_signingkey=$(gum input --placeholder "Github signing key")
    git config --global user.signingkey "${git_user_signingkey}"
  fi
  substep_done "Signing key ➡ set"
  substep_done "Configure Github user ➡ complete"

  substep "Configure git hooks"
  ln -f hooks/* .git/hooks
  substep_done "Configure git hooks ➡ complete"
  step_done "Done"
}

configure_ssh() {
  local BREWLIST
  local INSTALLED=()
  local PASSMGRS=(
    "1password"
    "bitwarden"
  )
  local SSHAGENT

  step "Configuring SSH for ${TYPE}"
  substep "Checking for SSH agents"
  BREWLIST="$(brew list)"
  for mgr in "${PASSMGRS[@]}"; do
    if echo "${BREWLIST}" | grep "${mgr}" | head -1 >/dev/null; then
      INSTALLED+=("${mgr}")
    fi
  done

  if [ ${#INSTALLED[@]} -gt 0 ]; then
    for agent in "${INSTALLED[@]}"; do
      if grep "${agent}" "${HOME}"/.ssh/config >/dev/null; then
        SSHAGENT="${agent}"
      fi
    done

    if [ "${SSHAGENT}" ]; then
      substep_done "Found existing configuration for ${SSHAGENT}"
      substep_done "Location: ${HOME}/.ssh/config"
      substep_done "Checking for SSH agent ➡ complete"
    else
      substep_done "Checking for SSH agent ➡ complete"
      warn "No SSH agent configuration detected"
      SSHAGENT=$(gum choose --header "Which SSH agent do you want to configure?" --limit 1 "${INSTALLED[@]}")
      substep "Configuring ${SSHAGENT} SSH agent"
      # shellcheck disable=SC1090
      ssh_agents/"${SSHAGENT}"
      substep_done "Configuring ${SSHAGENT} SSH agent ➡ complete"
    fi
  else
    err "No SSH agents installed ➡ exiting"
    exit 0
  fi
  step_done "Done"
}

install_dependencies() {
  local BREWFILES
  local GETTYPES=()

  step "Installing dependencies"
  if ! which brew >/dev/null; then
    warn "Homebrew is not installed"
    substep "Do you want to install Homebrew?"
    warn "Selecting yes will execute the following command"
    echo ""
    # shellcheck disable=SC2016
    warn_bg '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
    echo ""
    substep "Are you happy to continue?"
    choose_wisely
    echo ""

    # Install Hombrew and prep for first run
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  if which brew >/dev/null; then
    substep_done "Homebrew is configured"
  fi

  if ! which gum >/dev/null; then
    warn "Gum is not installed"
    substep "Installing gum"
    brew install gum >/dev/null 2>&1
    substep_done "Gum installed"
  fi

  substep "Processing common brewfile"
  gum spin --spinner points --title "Grab a cuppa" -- brew bundle --file=brewfiles/Brewfile
  substep_done "Processing common brewfile ➡ complete"

  shopt -s nullglob
  BREWFILES=(brewfiles/Brewfile.*)
  shopt -u nullglob

  for file in "${BREWFILES[@]}"; do
    GETTYPES+=("$(echo "${file}" | cut -d'.' -f2)")
  done

  if [ -z "${TYPE}" ]; then
    TYPE=$(gum choose --header "What's the nature of the beast?" --limit 1 "${GETTYPES[@]}")
  fi

  substep "Processing ${TYPE} brewfile"
  gum spin --spinner points --title "Installing ${TYPE} applications" -- brew bundle --file=brewfiles/Brewfile."${TYPE}"
  substep_done "Processing ${TYPE} brewfile ➡ complete"
  step_done "Done"
}

print_help() {
  echo
  echo "$0 [options]"
  echo "Fettle your machine by installing some standard stuff"
  echo ""
  echo "options:"
  echo "  -h  | --help             Displays this message"
  echo "  -d  | --dependencies     Only install dependencies. Can be used with -p or -w"
  echo "  -n  | --no-dependencies  Don't install dependencies Can be used with -p or -w"
  echo "  -p  | --personal         Fettle your machine for personal use"
  echo "  -w  | --work             Fettle your machine for work use"
  echo ""
  exit 1
}

setup_work_dir() {
  step "Checking for working directory"
  mkdir -p "${HOME}/code"
  substep_done "Working directory set to \"${HOME}/code\""
  step_done "Done"
}

source_customisations() {
  step "Sourcing customisations"
  source_cmd="source ${HOME}/.fettle-it/customisations/customiser"

  substep "Sourcing for bash"
  append_to_file "${source_cmd}" "${HOME}"/.bashrc
  substep_done "Sourcing for bash ➡ complete"

  substep "Sourcing for zsh"
  append_to_file "${source_cmd}" "${HOME}"/.zshrc
  substep_done "Sourcing for zsh ➡ complete"
  step_done "Done"
}

symlink_configs() {
  step "Symlinking configurations"
  if [ "${TYPE}" = "work" ]; then
    substep "k9s"
    ln -sf ~/.fettle-it/configs/k9s ~/.config &>/dev/null
    k9s_config="# vim: ft=bash
# Source k9s config
export K9S_CONFIG_DIR=~/.config/k9s
export K9S_LOGS_DIR=~/.config/k9s/logs"
    append_to_file "${k9s_config}" "${HOME}/.fettle-it/customisations/work.env"
    substep_done "k9s ➡ complete"
  fi

  substep "AltTab"
  ln -sf  ~/.fettle-it/configs/alttab/com.lwouis.alt-tab-macos.plist ~/Library/Preferences/com.lwouis.alt-tab-macos.plist &>/dev/null
  defaults import lcom.lwouis.alt-tab-macos.plist ~/.fettle-it/configs/alttab/com.lwouis.alt-tab-macos.plist
  substep_done "AltTab ➡ complete"

  substep "eza"
  ln -sf ~/.fettle-it/configs/eza ~/.config/ &>/dev/null
  substep_done "eza ➡ complete"

  substep "Rectangle"
  ln -sf  ~/.fettle-it/configs/rectangle/RectangleConfig.json ~/Library/Application\ Support/Rectangle/RectangleConfig.json &>/dev/null
  substep_done "Rectangle ➡ complete"
  step_done "Done"
}

main() {
  pushd "$(dirname "$0")" >/dev/null
  banner
  setup_work_dir
  if [ -z "${DEPS}" ]; then
    install_dependencies
  fi
  configure_git
  configure_ssh
  source_customisations
  symlink_configs
  application_configs
  cleanup
  popd >/dev/null
}

for option in "$@"
do
  case ${option} in
    -h|--help)
    print_help
    ;;
    -d|--dependencies)
    install_dependencies
    exit
    ;;
    -n|--no-dependencies)
    DEPS=false
    ;;
    -p|--personal)
    TYPE="personal"
    ;;
    -w|--work)
    TYPE="work"
    ;;
    *)
    err "I've no idea what ${option} means"
    print_help
    ;;
  esac
done

main
